// ==============================
// API-konfiguration
// ==============================

// API-nyckel f√∂r att f√• tillg√•ng till TMDb:s databas.
const API_KEY = '72dd7b5804849fa9be8b72edfe8abdc1';

// Grundadress f√∂r TMDb API-anrop.
const BASE_URL = 'https://api.themoviedb.org/3';

// Adress till lokal server f√∂r inloggning och gillade filmer.
const API_URL = "http://localhost:5000";

// ==============================
// DOM-element
// ==============================

// H√§mtar elementet d√§r filmer ska visas.
const container = document.getElementById('movie-container');

// H√§mtar like-knappen fr√•n HTML.
const likeBtn = document.getElementById('like-btn');

// H√§mtar dislike-knappen fr√•n HTML.
const dislikeBtn = document.getElementById('dislike-btn');

// H√§mtar anv√§ndarikonen fr√•n HTML.
const userIcon = document.getElementById("user-icon");

// H√§mtar panelen f√∂r inloggning/registrering.
const authPanel = document.getElementById("auth-panel");

// H√§mtar anv√§ndarmenyn.
const userMenu = document.getElementById("user-menu");

// H√§mtar genremenyn som √∂ppnas.
const genreMenu = document.getElementById("genre-menu");

// H√§mtar ikonen f√∂r att √∂ppna genremenyn.
const genreIcon = document.getElementById("genre-icon");

// H√§mtar panelen d√§r genrerna listas.
const genrePanel = document.getElementById("genre-panel");

// ==============================
// Variabler
// ==============================

// Lista som lagrar filmer som h√§mtats.
let movies = [];

// Index f√∂r nuvarande film.
let currentIndex = 0;

// Referens till det nuvarande filmkortet.
let currentCard = null;

// Anger om anv√§ndaren √§r inloggad.
let isLoggedIn = false;

// ==============================
// Anv√§ndarmeny
// ==============================

// √ñppnar/st√§nger anv√§ndarmenyn n√§r man klickar p√• ikonen.
userIcon.addEventListener("click", (e) => {
  e.stopPropagation(); // Stoppar klick fr√•n att bubbla upp.
  userMenu.classList.toggle("locked"); // V√§xlar synlighet.
});

// St√§nger anv√§ndarmenyn om man klickar utanf√∂r den.
document.addEventListener("click", (e) => {
  if (!userMenu.contains(e.target)) {
    userMenu.classList.remove("locked");
  }
});

// √ñppnar/st√§nger genremenyn n√§r man klickar p√• genreikonen.
genreIcon.addEventListener("click", (e) => {
  e.stopPropagation();
  genreMenu.classList.toggle("locked");
});

// St√§nger genremenyn om man klickar utanf√∂r den.
document.addEventListener("click", (e) => {
  if (!genreMenu.contains(e.target)) {
    genreMenu.classList.remove("locked");
  }
});

// ==============================
// Inloggning
// ==============================

// Loggar in anv√§ndaren n√§r man klickar p√• login-knappen.
document.getElementById("login-btn").addEventListener("click", async () => {
  // H√§mtar anv√§ndarnamn och l√∂senord fr√•n inputf√§lt.
  const username = document.getElementById("username").value;
  const password = document.getElementById("password").value;

  // Skickar POST-f√∂rfr√•gan till servern f√∂r inloggning.
  const res = await fetch(`${API_URL}/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    credentials: "include", // Skickar cookies.
    body: JSON.stringify({ username, password })
  });

  // Hanterar svaret fr√•n servern.
  const data = await res.json();
  if (res.ok) {
/**
 * Anger att anv√§ndaren √§r inloggad och uppdaterar gr√§nssnittet. 
 */
    isLoggedIn = true;
    document.getElementById("auth-status").textContent = "Logged in!";
    document.getElementById("logout-btn").style.display = "inline";
  } else {
    document.getElementById("auth-status").textContent = data.error;
  }
});

// ==============================
// Registrering
// ==============================

// Registrerar ny anv√§ndare.
document.getElementById("register-btn").addEventListener("click", async () => {
  const username = document.getElementById("username").value;
  const password = document.getElementById("password").value;

  // Skickar POST-f√∂rfr√•gan till servern f√∂r att registrera.
  const res = await fetch(`${API_URL}/register`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    credentials: "include",
    body: JSON.stringify({ username, password })
  });

  const data = await res.json();
  if (res.ok) {
    document.getElementById("auth-status").textContent = "Registered! Now log in.";
  } else {
    document.getElementById("auth-status").textContent = data.error;
  }
});

// ==============================
// Utloggning
// ==============================

// Loggar ut anv√§ndaren.
document.getElementById("logout-btn").addEventListener("click", async () => {
  await fetch(`${API_URL}/logout`, {
    method: "POST",
    credentials: "include"
  });
  isLoggedIn = false;
  document.getElementById("auth-status").textContent = "Logged out";
  document.getElementById("logout-btn").style.display = "none";
});

// ==============================
// Genrer
// ==============================

// Lista som lagrar alla tillg√§ngliga genrer.
let genres = [];

/**
 * H√§mtar en komplett lista √∂ver filmgenrer fr√•n TMDB och renderar dem i
 * sidopanelen.
 *
 * ### Fl√∂de
 * 1. Anropa `/genre/movie/list` med aktuell `API_KEY`.  
 * 2. Extrahera `genres`‚Äëarrayen ur svaret.  
 * 3. Spara till global variabel och anropa {@link displayGenres}.  
 *
 * @async
 * @throws `TypeError` om n√§tverksanropet misslyckas. Felet f√•ngas lokalt och
 *   loggas till konsolen f√∂r att inte krascha appen.
 * @returns {Promise<void>} L√∂ste n√§r genrerna √§r f√§rdigrenderade.
 *
 * @example
 * // Automatisk init i slutet av filen
 * fetchGenres();
 */
// H√§mtar tillg√§ngliga genrer fr√•n TMDb och visar dem.
async function fetchGenres() {
  try {
    const res = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`);
    const data = await res.json();
    genres = data.genres || [];
    displayGenres();
  } catch (err) {
    console.error("Error fetching genres:", err);
  }
}

/**
 * Skapar ett klickbart `<div>`‚Äëelement per genre och l√§gger till det i
 * `genrePanel`.
 *
 * Sid¬≠effekt: Rensar panelen *innan* den fylls, s√• funktionen kan anropas flera
 * g√•nger (t.ex. efter en s√∂kning) utan att skapa dubletter.
 *
 * @returns {void}
 */
// Visar alla genrer i menyf√§ltet. 
function displayGenres() {
  genrePanel.innerHTML = ''; // T√∂mmer genrelistan f√∂rst.

  // Skapar ett menyval f√∂r varje genre.
  genres.forEach((genre) => {
    const genreItem = document.createElement('div');
    genreItem.textContent = genre.name;
    genreItem.classList.add('genre-item');

    // N√§r man klickar p√• en genre h√§mtas filmer i den genren.
    genreItem.addEventListener('click', () => {
      currentIndex = 0; 
      fetchMovies(40, genre.id);
    });

    genrePanel.appendChild(genreItem);
  });
}

/**
 * H√§mtar ett godtyckligt antal sidor filmer via TMDB‚ÄëAPI:et.  
 * Standardl√§get (`genreId = null`) h√§mtar "mest popul√§ra" √∂ver alla genrer.
 * Med ett `genreId` filtrerar vi p√• angiven genre.
 *
 * ### Prestanda & begr√§nsningar
 * ‚Ä¢ Varje sida = cirka 20 filmer.  
 * ‚Ä¢ 40¬†sidor ‚âà¬†800 filmer ‚âà¬†¬±10¬†MB JSON.  
 *   Detta √§r acceptabelt i en prototyp men kan justeras f√∂r produktion.  
 *
 * @async
 * @param {number} [pages=40]  Antal sidor att h√§mta.
 * @param {number|null} [genreId=null]  TMDB‚Äëgenre‚ÄëID att filtrera p√• eller `null`.
 * @returns {Promise<void>}  N√§r filmerna √§r h√§mtade och f√∂rsta kortet visas.
 *
 * @example
 * // H√§mta 10 sidor actionfilmer (genre¬†28) och visa f√∂rsta kortet
 * fetchMovies(10, 28);
 */
// H√§mtar popul√§ra filmer (eller filtrerat p√• genre).
async function fetchMovies(pages = 40, genreId = null) {
  const allMovies = [];

  // G√•r igenom varje sida f√∂r att h√§mta filmer.
  for (let i = 1; i <= pages; i++) {
    let url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=${i}`;
    
    // Om genreId finns, h√§mtar bara filmer med den genren.
    if (genreId) {
      url = `${BASE_URL}/discover/movie?api_key=${API_KEY}&language=en-US&page=${i}&with_genres=${genreId}`;
    }

    const res = await fetch(url);
    const data = await res.json();
    allMovies.push(...(data.results || []));
  }

  movies = shuffle(allMovies); // Blandar filmerna.
  showNextMovie(); // Visar f√∂rsta filmen.
}

/**
 * Renderar **`movies[currentIndex]`** som ett swipe‚Äëkort. Om listan √§r slut
 * visas ett "Inga fler filmer"‚Äëmeddelande.
 *
 * @returns {void}
 */
// Visar n√§sta film i listan.
function showNextMovie() {
  if (currentIndex >= movies.length) {
    document.getElementById('movie-info').innerHTML = "<p>No more movies!</p>";
    container.innerHTML = '';
    return;
  }

  const movie = movies[currentIndex];
  const card = document.createElement('div');
  card.className = 'movie-card';

  // Anv√§nder TMDb-bild eller placeholder.
  const posterPath = movie.poster_path
    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`
    : 'https://via.placeholder.com/300x450?text=No+Image';

  // Visar betyg, datum och beskrivning.
  const rating = movie.vote_average ? movie.vote_average.toFixed(1) : 'N/A';
  const releaseDate = movie.release_date || 'Unknown';
  const fullDescription = movie.overview || 'No description available.';

  card.style.backgroundImage = `url(${posterPath})`;
  container.innerHTML = '';
  container.appendChild(card);
  currentCard = card;

  document.getElementById('movie-info').innerHTML = `
    <h2>${movie.title}</h2>
    <p class="meta">‚≠ê ${rating} | üìÖ ${releaseDate}</p>
    <div class="description">${fullDescription}</div>
  `;

  addSwipeHandlers(card, movie);
}

/**
 * Binder mus‚Äë och touch‚Äëh√§ndelser p√• ett filmkort f√∂r att k√§nna av svep √•t h√∂ger
 * (gilla) eller v√§nster (skip).
 *
 * ### Fl√∂de
 * 1. **mousedown / touchstart**  ‚Üí Spara start‚ÄëX.  
 * 2. **mousemove / touchmove**   ‚Üí Flytta kortet och luta det proportionellt.  
 * 3. **mouseup / touchend**      ‚Üí Om >50¬†px ‚Üí gilla/skip, annars √•terst√§ll.  
 *
 * @param {HTMLElement} card  Filmkortet som ska g√∂ras draggable.
 * @param {object}      movie Filmdata kopplad till kortet.
 * @returns {void}
 */
// L√§gger till funktion f√∂r att dra kort √•t h√∂ger/v√§nster. 
function addSwipeHandlers(card, movie) {
  let offsetX = 0;
  let isDragging = false;

  // Startar dragningen.
  const onDragStart = (e) => {
    isDragging = true;
    offsetX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
  };

  // Flyttar kortet medan man drar.
  const onDragMove = (e) => {
    if (!isDragging) return;
    const currentX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
    const diffX = currentX - offsetX;
    card.style.transform = `translateX(${diffX}px) rotate(${diffX / 20}deg)`;
  };

  // Avslutar dragningen och avg√∂r riktning.
  const onDragEnd = (e) => {
    if (!isDragging) return;
    isDragging = false;
    const endX = e.type.includes('touch')
      ? e.changedTouches[0].clientX
      : e.clientX;
    const diffX = endX - offsetX;

    // Swipa h√∂ger = like, v√§nster = dislike.
    if (diffX > 50) {
      likeMovie(movie);
      animateSwipe(card, 'right');
    } else if (diffX < -50) {
      discardMovie(movie);
      animateSwipe(card, 'left');
    } else {
      card.style.transform = 'translateX(0px) rotate(0deg)';
    }
  };

  // L√§gger till mus- och touchh√§ndelser.
  card.addEventListener('mousedown', onDragStart);
  card.addEventListener('mousemove', onDragMove);
  card.addEventListener('mouseup', onDragEnd);
  card.addEventListener('touchstart', onDragStart);
  card.addEventListener('touchmove', onDragMove);
  card.addEventListener('touchend', onDragEnd);
}

/**
 * Animerar att kortet flyger √•t v√§nster eller h√∂ger och laddar sen n√§sta film.
 *
 * @param {HTMLElement} card      Det kort som ska animeras bort.
 * @param {'left'|'right'} direction  "right"¬†=¬†gilla, "left"¬†=¬†skippa.
 * @returns {void}
 */
// Animerar kortet n√§r det swipas bort. 
function animateSwipe(card, direction) {
  card.classList.add(direction === 'right' ? 'liked' : 'disliked');
  card.style.transition = 'transform 0.5s ease, opacity 0.5s ease';
  card.style.transform = `translateX(${ direction === 'right' ? '500px' : '-500px' }) rotate(${ direction === 'right' ? '45deg' : '-45deg' })`;
  card.style.opacity = '0';

  // V√§nta lite innan n√§sta film visas.
  setTimeout(() => {
    currentIndex++;
    showNextMovie();
  }, 400);
}

/**
 * Skickar filmens JSON till backend‚Äëendpointen `/like` om anv√§ndaren √§r inloggad.
 *
 * @param {object} movie  Film¬≠objektet som anv√§ndaren gillar.
 * @returns {void}
 */
// Skickar film till servern om anv√§ndaren gillat den. 
function likeMovie(movie) {
  if (!isLoggedIn) {
    return;
  }
  fetch(`${API_URL}/like`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    credentials: "include",
    body: JSON.stringify(movie)
  })
    .then((res) => res.json())
    .then((data) => console.log("Liked:", data))
    .catch((err) => console.error("Error liking movie:", err));
}

/**
 * Stub f√∂r "skip"‚Äëlogik. Just nu loggas endast titeln till konsolen 
 *
 * @param {object} movie
 * @returns {void}
 */
// Skriver ut i konsolen n√§r filmen ignoreras. 
function discardMovie(movie) {
  console.log("Discarded:", movie.title);
}

// ==============================
// Knappar f√∂r like/dislike
// ==============================

// Gillar filmen om man klickar p√• like-knappen.
likeBtn.addEventListener("click", () => {
  if (!currentCard) return;
  likeMovie(movies[currentIndex]);
  animateSwipe(currentCard, "right");
});

// Ignorerar filmen om man klickar p√• dislike-knappen.
dislikeBtn.addEventListener("click", () => {
  if (!currentCard) return;
  discardMovie(movies[currentIndex]);
  animateSwipe(currentCard, "left");
});

/**
 * Fisher‚ÄëYates‚Äëshuffle som blandar en array in‚Äëplace.
 *
 * @template T
 * @param {T[]} array  Arrayen som ska blandas.
 * @returns {T[]}      Samma array‚Äëreferens, nu i slumpad ordning.
 *
 * @example
 * const arr = [1, 2, 3, 4];
 * shuffle(arr); // t.ex. [3, 1, 4, 2]
 */
// Blandar om filmerna i listan. 
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// ==============================
// Initiering
// ==============================

// H√§mtar genrer n√§r sidan laddas.
fetchGenres();

// H√§mtar filmer n√§r sidan laddas.
fetchMovies();